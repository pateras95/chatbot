{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nexport default {\n  data() {\n    return {\n      prompt: '',\n      response: ''\n    };\n  },\n  methods: {\n    async generateText() {\n      const model = genAI.getGenerativeModel({\n        model: \"gemini-1.5-flash\"\n      });\n      const prompt = \"Write a story about a magic backpack.\";\n      const result = await model.generateContent(prompt);\n      const response = await result.response;\n      const text = response.text();\n      console.log(text);\n      try {\n        const response = await generateTextFromPrompt({\n          prompt: this.prompt,\n          model: 'gemini-pro',\n          // Replace with the appropriate model\n          apiKey: process.env.VUE_APP_GOOGLE_GENAI_API_KEY // Ensure you have set this in your environment variables\n        });\n        this.response = response.data.choices[0].text; // Adjust based on the actual API response structure\n      } catch (error) {\n        console.error('Error generating text:', error);\n        // Handle errors gracefully, e.g., display a message to the user\n      }\n    }\n  }\n};","map":{"version":3,"names":["GoogleGenerativeAI","data","prompt","response","methods","generateText","model","genAI","getGenerativeModel","result","generateContent","text","console","log","generateTextFromPrompt","apiKey","process","env","VUE_APP_GOOGLE_GENAI_API_KEY","choices","error"],"sources":["src/App.vue"],"sourcesContent":["<template>\n    <div id=\"app\">\n        <input type=\"text\" v-model=\"prompt\" placeholder=\"Enter your prompt...\" />\n        <button @click=\"generateText\">Generate Text</button>\n        <p v-if=\"response\">{{ response }}</p>\n    </div>\n</template>\n\n<script>\n    import { GoogleGenerativeAI } from '@google/generative-ai'\n\n    export default {\n        data() {\n            return {\n                prompt: '',\n                response: ''\n            }\n        },\n        methods: {\n            async generateText() {\n\n              const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\"});\n\n              const prompt = \"Write a story about a magic backpack.\"\n\n              const result = await model.generateContent(prompt);\n              const response = await result.response;\n              const text = response.text();\n              console.log(text);\n\n\n                try {\n                    const response = await generateTextFromPrompt({\n                        prompt: this.prompt,\n                        model: 'gemini-pro', // Replace with the appropriate model\n                        apiKey: process.env.VUE_APP_GOOGLE_GENAI_API_KEY // Ensure you have set this in your environment variables\n                    })\n                    this.response = response.data.choices[0].text // Adjust based on the actual API response structure\n                } catch (error) {\n                    console.error('Error generating text:', error)\n                    // Handle errors gracefully, e.g., display a message to the user\n                }\n            }\n        }\n    }\n</script>\n\n<style>\n/* Add some basic styling */\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  margin-top: 60px;\n}\n\ninput {\n  padding: 10px;\n  font-size: 16px;\n  margin-right: 10px;\n}\n\nbutton {\n  padding: 10px;\n  font-size: 16px;\n}\n\np {\n  margin-top: 20px;\n  font-size: 18px;\n}\n</style>\n"],"mappings":"AASA,SAAAA,kBAAA;AAEA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAA;MAEA,MAAAC,KAAA,GAAAC,KAAA,CAAAC,kBAAA;QAAAF,KAAA;MAAA;MAEA,MAAAJ,MAAA;MAEA,MAAAO,MAAA,SAAAH,KAAA,CAAAI,eAAA,CAAAR,MAAA;MACA,MAAAC,QAAA,SAAAM,MAAA,CAAAN,QAAA;MACA,MAAAQ,IAAA,GAAAR,QAAA,CAAAQ,IAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA;MAGA;QACA,MAAAR,QAAA,SAAAW,sBAAA;UACAZ,MAAA,OAAAA,MAAA;UACAI,KAAA;UAAA;UACAS,MAAA,EAAAC,OAAA,CAAAC,GAAA,CAAAC,4BAAA;QACA;QACA,KAAAf,QAAA,GAAAA,QAAA,CAAAF,IAAA,CAAAkB,OAAA,IAAAR,IAAA;MACA,SAAAS,KAAA;QACAR,OAAA,CAAAQ,KAAA,2BAAAA,KAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}